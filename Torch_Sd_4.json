def print_board(board):
    """
    Function to print the Sudoku board.
    """
    for i in range(9):
        for j in range(9):
            print(board[i][j], end=" ")
            if (j + 1) % 3 == 0 and j < 8:
                print("|", end=" ")
        print()
        if (i + 1) % 3 == 0 and i < 8:
            print("-" * 21)

def is_valid(board, row, col, num):
    """
    Function to check if it's valid to place 'num' in board[row][col].
    """
    # Check if 'num' is not present in the current row and column
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False

    # Check if 'num' is not present in the current 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(board):
    """
    Function to solve the Sudoku puzzle using backtracking.
    """
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return True  # No empty cells left, puzzle is solved
    
    row, col = empty_cell

    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num  # Try placing 'num' in the empty cell
            
            if solve_sudoku(board):
                return True  # If it leads to a solution, return True
            
            board[row][col] = 0  # Backtrack if placing 'num' doesn't lead to a solution

    return False  # No valid number found for this cell, backtrack

def find_empty_cell(board):
    """
    Function to find the first empty cell (with value 0) in the Sudoku board.
    """
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j  # Return row and column indices of the empty cell
    return None  # If no empty cell is found, return None

def main():
    # Input Sudoku puzzle (0 represents empty cells)
    sudoku_board = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print("Sudoku Puzzle:")
    print_board(sudoku_board)
    print("\nSolving...\n")

    if solve_sudoku(sudoku_board):
        print("Sudoku Solved:")
        print_board(sudoku_board)
    else:
        print("No solution exists for the given Sudoku puzzle.")

if __name__ == "__main__":
    main()
